{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raven/Frontend-Dev/main-parent/packages/admin-panel/src/services/shopService.ts"],"sourcesContent":["// اینترفیس‌ها از بخش قبل\r\nexport interface Shop {\r\n  id: string;\r\n  name: string;\r\n  lastname: string;\r\n  shopTitle: string;\r\n  status: \"Ok\" | \"Pending\" | \"Rejected\";\r\n  registrationStatus: \"Confirmed\" | \"Pending\" | \"Rejected\";\r\n  createDate: string;\r\n}\r\n\r\nexport interface PaginatedResponse<T> {\r\n  currentPage: number;\r\n  totalPages: number;\r\n  pageSize: number;\r\n  totalCount: number;\r\n  items: T[];\r\n}\r\n\r\n// یک تابع کمکی برای گرفتن توکن احراز هویت\r\n// در یک اپلیکیشن واقعی، این تابع توکن را از Local Storage, Cookie یا State Management می‌خواند\r\nconst getAuthToken = (): string => {\r\n  // این توکن یک توکن نمونه است و باید با توکن واقعی شما جایگزین شود\r\n  return \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOiIzNjAxZWY2YS02MTU5LTQ0ODEtYWYzYi1kZjU4ZGFmZWJlNWEiLCJSb2xlIjoiQW5vbnltb3VzIiwibmJmIjoxNzU1OTQ1NzA5LCJleHAiOjE3NjU5NDU2MDksImlzcyI6IllhZGFrY2hpIiwiYXVkIjoiZnJvbnQubG90dGVzdC5pciJ9.fnRQ5ClhnF1wih3LJ_sFLpjr5aqm6ftOaOJfF1LfKLdDBd4E1hucPPdQ4kIeyFXvpb7CV-aav6P887MZW7NiGg\";\r\n};\r\n\r\n\r\n/**\r\n * لیستی از فروشگاه‌ها را به صورت صفحه‌بندی شده از API واکشی می‌کند.\r\n * @param pageNumber شماره صفحه\r\n * @param pageSize تعداد آیتم در هر صفحه\r\n * @returns یک Promise که به PaginatedResponse<Shop> حل می‌شود\r\n */\r\nexport const getShops = async (pageNumber: number, pageSize: number): Promise<PaginatedResponse<Shop>> => {\r\n  const token = getAuthToken();\r\n const apiUrl = `/api/A_Shop/Shop?PageNumber=${pageNumber}&PageSize=${pageSize}`;\r\n\r\n  const response = await fetch(apiUrl, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Accept': '*/*',\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n  });\r\n\r\n  // بررسی خطا در پاسخ\r\n  if (!response.ok) {\r\n    throw new Error(`خطا در واکشی داده‌ها: ${response.statusText}`);\r\n  }\r\n\r\n  // پاسخ را به صورت JSON برمی‌گردانیم و تایپ آن را مشخص می‌کنیم\r\n  const data: PaginatedResponse<Shop> = await response.json();\r\n  return data;\r\n};"],"names":[],"mappings":"AAAA,yBAAyB;;;;;AAmBzB,0CAA0C;AAC1C,+FAA+F;AAC/F,MAAM,eAAe;IACnB,kEAAkE;IAClE,OAAO;AACT;AASO,MAAM,WAAW,OAAO,YAAoB;IACjD,MAAM,QAAQ;IACf,MAAM,SAAS,CAAC,4BAA4B,EAAE,WAAW,UAAU,EAAE,UAAU;IAE9E,MAAM,WAAW,MAAM,MAAM,QAAQ;QACnC,QAAQ;QACR,SAAS;YACP,UAAU;YACV,iBAAiB,CAAC,OAAO,EAAE,OAAO;QACpC;IACF;IAEA,oBAAoB;IACpB,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,SAAS,UAAU,EAAE;IAChE;IAEA,8DAA8D;IAC9D,MAAM,OAAgC,MAAM,SAAS,IAAI;IACzD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raven/Frontend-Dev/main-parent/packages/admin-panel/src/app/page.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\n\n// ۱. وارد کردن الگوهای مورد نیاز\nimport {\n  YadakchiAdminLayout,\n  ListPageLayout, // <-- الگوی ساده شده\n  Label,\n  type ColumnDefinition,\n} from \"@my-ds/design-system\";\n\nimport { getShops, type Shop } from \"../services/shopService\";\n\nexport default function HomePage() {\n  const [shops, setShops] = useState<Shop[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const pathname = usePathname();\n  const renderLink = (href: string, children: React.ReactNode) => <Link href={href}>{children}</Link>;\n\n  useEffect(() => {\n    const fetchShops = async () => {\n      try {\n        setIsLoading(true);\n        const response = await getShops(1, 30);\n        setShops(response.items);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : \"یک خطای ناشناخته رخ داد.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchShops();\n  }, []);\n\n  const shopColumns: ColumnDefinition<Shop>[] = [\n    { accessorKey: 'shopTitle', header: 'نام فروشگاه' },\n    { accessorKey: 'name', header: 'نام فروشنده', cell: (shop) => `${shop.name} ${shop.lastname}` },\n    { accessorKey: 'registrationStatus', header: 'وضعیت', cell: (shop) => <Label text={shop.registrationStatus} size=\"sm\" variant={shop.registrationStatus === 'Confirmed' ? 'primary' : 'error'} /> },\n  ];\n  \n  // ۲. آماده‌سازی props برای ListPageLayout (ساده شده)\n  const listPageProps = {\n    tableProps: {\n      columns: shopColumns,\n      data: shops,\n      emptyStateMessage: \"هیچ فروشگاهی یافت نشد.\",\n    },\n    isLoading: isLoading,\n    error: error,\n  };\n\n  return (\n    <YadakchiAdminLayout\n      currentPath={pathname}\n      renderLink={renderLink}\n    >\n      {/* ۳. استفاده از الگوی ساده شده */}\n      ادمین پنل\n    </YadakchiAdminLayout>\n  );\n}"],"names":[],"mappings":";;;;;AACA;AACA;AACA;;;;;;AAUA;AAbA;;;;;;;AAee,SAAS;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,qWAAQ,EAAS,EAAE;IAC7C,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,qWAAQ,EAAC;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,qWAAQ,EAAgB;IAElD,MAAM,WAAW,IAAA,qSAAW;IAC5B,MAAM,aAAa,CAAC,MAAc,yBAA8B,kYAAC,2TAAI;YAAC,MAAM;sBAAO;;;;;;IAEnF,IAAA,sWAAS,EAAC;QACR,MAAM,aAAa;YACjB,IAAI;gBACF,aAAa;gBACb,MAAM,WAAW,MAAM,IAAA,6MAAQ,EAAC,GAAG;gBACnC,SAAS,SAAS,KAAK;YACzB,EAAE,OAAO,KAAK;gBACZ,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;YAChD,SAAU;gBACR,aAAa;YACf;QACF;QACA;IACF,GAAG,EAAE;IAEL,MAAM,cAAwC;QAC5C;YAAE,aAAa;YAAa,QAAQ;QAAc;QAClD;YAAE,aAAa;YAAQ,QAAQ;YAAe,MAAM,CAAC,OAAS,GAAG,KAAK,IAAI,CAAC,CAAC,EAAE,KAAK,QAAQ,EAAE;QAAC;QAC9F;YAAE,aAAa;YAAsB,QAAQ;YAAS,MAAM,CAAC,qBAAS,kYAAC;oBAAM,MAAM,KAAK,kBAAkB;oBAAE,MAAK;oBAAK,SAAS,KAAK,kBAAkB,KAAK,cAAc,YAAY;;;;;;QAAY;KAClM;IAED,qDAAqD;IACrD,MAAM,gBAAgB;QACpB,YAAY;YACV,SAAS;YACT,MAAM;YACN,mBAAmB;QACrB;QACA,WAAW;QACX,OAAO;IACT;IAEA,qBACE,kYAAC;QACC,aAAa;QACb,YAAY;kBAEwB;;;;;;AAI1C","debugId":null}}]
}