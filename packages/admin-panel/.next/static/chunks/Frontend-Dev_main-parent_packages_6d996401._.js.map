{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raven/Frontend-Dev/main-parent/packages/api-client/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createApiClient = createApiClient;\n// ۲. تعریف تابع اصلی\n/**\n * یک کلاینت API قابل استفاده مجدد ایجاد می‌کند.\n * @param baseUrl آدرس پایه API (مثلاً 'https://api.example.com/api')\n * @param getToken (اختیاری) یک تابع که توکن احراز هویت را برمی‌گرداند\n */\nfunction createApiClient(baseUrl, getToken) {\n    // تابع داخلی و خصوصی برای ارسال درخواست‌ها\n    const request = async (method, endpoint, options = {}) => {\n        const { params, body, headers = {} } = options;\n        // ساخت query string از پارامترها\n        const query = params ? `?${new URLSearchParams(params).toString()}` : '';\n        const url = `${baseUrl}/${endpoint}${query}`;\n        // گرفتن توکن در لحظه ارسال درخواست\n        const token = getToken === null || getToken === void 0 ? void 0 : getToken();\n        const isFormData = body instanceof FormData;\n        // ساخت هدرهای نهایی\n        const finalHeaders = Object.assign(Object.assign(Object.assign({}, (isFormData ? {} : { 'Content-Type': 'application/json' })), (token ? { Authorization: `Bearer ${token}` } : {})), headers);\n        // ارسال درخواست با استفاده از fetch API\n        const response = await fetch(url, {\n            method,\n            headers: finalHeaders,\n            body: method !== 'GET' && body ? (isFormData ? body : JSON.stringify(body)) : undefined,\n        });\n        // مدیریت خطاها\n        if (!response.ok) {\n            // می‌توانید منطق پیچیده‌تری برای مدیریت خطاها اینجا اضافه کنید\n            const errorData = await response.json().catch(() => ({ message: response.statusText }));\n            throw new Error(errorData.message || `Request failed with status ${response.status}`);\n        }\n        // اگر پاسخ محتوا نداشت (مثلاً در 204 No Content)\n        if (response.status === 204) {\n            return null;\n        }\n        return response.json();\n    };\n    // ۳. برگرداندن آبجکتی با متدهای عمومی\n    return {\n        get: (endpoint, options) => request('GET', endpoint, options),\n        post: (endpoint, options) => request('POST', endpoint, options),\n        put: (endpoint, options) => request('PUT', endpoint, options),\n        delete: (endpoint, options) => request('DELETE', endpoint, options),\n    };\n}\n"],"names":[],"mappings":"AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,eAAe,GAAG;AAC1B,qBAAqB;AACrB;;;;CAIC,GACD,SAAS,gBAAgB,OAAO,EAAE,QAAQ;IACtC,2CAA2C;IAC3C,MAAM,UAAU,eAAO,QAAQ;YAAU,2EAAU,CAAC;QAChD,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,EAAE,GAAG;QACvC,iCAAiC;QACjC,MAAM,QAAQ,SAAS,AAAC,IAA0C,OAAvC,IAAI,gBAAgB,QAAQ,QAAQ,MAAO;QACtE,MAAM,MAAM,AAAC,GAAa,OAAX,SAAQ,KAAc,OAAX,UAAiB,OAAN;QACrC,mCAAmC;QACnC,MAAM,QAAQ,aAAa,QAAQ,aAAa,KAAK,IAAI,KAAK,IAAI;QAClE,MAAM,aAAa,gBAAgB;QACnC,oBAAoB;QACpB,MAAM,eAAe,OAAO,MAAM,CAAC,OAAO,MAAM,CAAC,OAAO,MAAM,CAAC,CAAC,GAAI,aAAa,CAAC,IAAI;YAAE,gBAAgB;QAAmB,IAAM,QAAQ;YAAE,eAAe,AAAC,UAAe,OAAN;QAAQ,IAAI,CAAC,IAAK;QACtL,wCAAwC;QACxC,MAAM,WAAW,MAAM,MAAM,KAAK;YAC9B;YACA,SAAS;YACT,MAAM,WAAW,SAAS,OAAQ,aAAa,OAAO,KAAK,SAAS,CAAC,QAAS;QAClF;QACA,eAAe;QACf,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,+DAA+D;YAC/D,MAAM,YAAY,MAAM,SAAS,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC;oBAAE,SAAS,SAAS,UAAU;gBAAC,CAAC;YACrF,MAAM,IAAI,MAAM,UAAU,OAAO,IAAI,AAAC,8BAA6C,OAAhB,SAAS,MAAM;QACtF;QACA,iDAAiD;QACjD,IAAI,SAAS,MAAM,KAAK,KAAK;YACzB,OAAO;QACX;QACA,OAAO,SAAS,IAAI;IACxB;IACA,sCAAsC;IACtC,OAAO;QACH,KAAK,CAAC,UAAU,UAAY,QAAQ,OAAO,UAAU;QACrD,MAAM,CAAC,UAAU,UAAY,QAAQ,QAAQ,UAAU;QACvD,KAAK,CAAC,UAAU,UAAY,QAAQ,OAAO,UAAU;QACrD,QAAQ,CAAC,UAAU,UAAY,QAAQ,UAAU,UAAU;IAC/D;AACJ","debugId":null}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raven/Frontend-Dev/main-parent/packages/admin-panel/src/services/apiClient.ts"],"sourcesContent":["// ۱. وارد کردن تابع createApiClient از پکیج جدیدی که ساختیم\r\nimport { createApiClient } from \"@my-app/api-client\";\r\n\r\n// ۲. تعریف یک تابع برای خواندن توکن احراز هویت\r\n// این تابع مختص اپلیکیشن شماست و می‌تواند در آینده پیچیده‌تر شود\r\nconst getToken = (): string | null => {\r\n  // در یک اپلیکیشن واقعی، توکن از localStorage، sessionStorage یا یک cookie خوانده می‌شود.\r\n  // برای تست، ما می‌توانیم توکن را به صورت ثابت برگردانیم.\r\n  // مطمئن شوید که این توکن معتبر و منقضی نشده باشد.\r\n  if (typeof window !== 'undefined') {\r\n    // مثال: return localStorage.getItem('authToken');\r\n  }\r\n  \r\n  // توکن نمونه شما:\r\n  return \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE3NTYxOTE2ODUsImV4cCI6MTc2NjE5MTU4NSwiaXNzIjoiWWFkYWtjaGkiLCJhdWQiOiJmcm9udC5sb3R0ZXN0LmlyIn0.w93hU4ZbbbvHi2desHqbDOcV8Y7x-DtiltLwZKMpqdXxrykgrJiBfXJgK-LqWgwNKy5cXQimsPIBWw8-FSJQug\";\r\n};\r\n\r\n// ۳. ایجاد یک نمونه (instance) از کلاینت API با استفاده از متغیر محیطی\r\n//    ما از /api/ به عنوان baseUrl استفاده می‌کنیم تا درخواست‌ها به پروکسی Next.js ارسال شوند\r\nconst apiClient = createApiClient(\r\n  '/api', // این آدرس به rewrites در next.config.js اشاره می‌کند\r\n  getToken\r\n);\r\n\r\n// ۴. export کردن نمونه برای استفاده در سراسر اپلیکیشن\r\nexport default apiClient;"],"names":[],"mappings":"AAAA,4DAA4D;;;;;AAC5D;;AAEA,+CAA+C;AAC/C,iEAAiE;AACjE,MAAM,WAAW;IACf,yFAAyF;IACzF,yDAAyD;IACzD,kDAAkD;IAClD,IAAI,aAAkB,aAAa;IACjC,kDAAkD;IACpD;IAEA,kBAAkB;IAClB,OAAO;AACT;AAEA,uEAAuE;AACvE,6FAA6F;AAC7F,MAAM,YAAY,IAAA,qMAAe,EAC/B,QACA;uCAIa","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raven/Frontend-Dev/main-parent/packages/admin-panel/src/services/shopsService.ts"],"sourcesContent":["import apiClient from \"./apiClient\";\r\n// تایپ‌ها را برای تمیزی به یک فایل جداگانه مانند services/api/types.ts منتقل می‌کنیم\r\n// اما فعلاً می‌توانند اینجا باشند.\r\nexport interface Shop {\r\n  id: string;\r\n  name: string;\r\n  lastname: string;\r\n  shopTitle: string;\r\n  status: \"Ok\" | \"Pending\" | \"Rejected\";\r\n  registrationStatus: \"Confirmed\" | \"Pending\" | \"Rejected\";\r\n  createDate: string;\r\n  description: string; // این فیلد را برای صفحه جزئیات اضافه می‌کنیم\r\n  logo?: string | null; \r\n}\r\n\r\nexport interface PaginatedResponse<T> {\r\n  currentPage: number;\r\n  totalPages: number;\r\n  pageSize: number;\r\n  totalCount: number;\r\n  items: T[];\r\n}\r\n\r\n\r\n/**\r\n * لیستی از فروشگاه‌ها را به صورت صفحه‌بندی شده واکشی می‌کند.\r\n */\r\nexport const getShops = (\r\n  pageNumber: number, \r\n  pageSize: number\r\n): Promise<PaginatedResponse<Shop>> => {\r\n  return apiClient.get('A_Shop/Shop', {\r\n    params: {\r\n      PageNumber: pageNumber,\r\n      PageSize: pageSize,\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * ✨ --- کلمه کلیدی export در اینجا اضافه شد --- ✨\r\n * اطلاعات یک فروشگاه خاص را بر اساس شناسه (ID) واکشی می‌کند.\r\n * @param shopId شناسه فروشگاه مورد نظر\r\n * @returns یک Promise که به آبجکت Shop حل می‌شود.\r\n */\r\nexport const getShopById = async (shopId: string): Promise<Shop> => {\r\n  const response: PaginatedResponse<Shop> = await apiClient.get('A_Shop/Shop', {\r\n    params: {\r\n      Ids: shopId,\r\n      PageNumber: 1,\r\n      PageSize: 1,\r\n    }\r\n  });\r\n\r\n  if (response && response.items && response.items.length > 0) {\r\n    return response.items[0];\r\n  }\r\n\r\n  throw new Error(`فروشگاهی با شناسه ${shopId} یافت نشد.`);\r\n};"],"names":[],"mappings":";;;;;;AAAA;;AA2BO,MAAM,WAAW,CACtB,YACA;IAEA,OAAO,6MAAS,CAAC,GAAG,CAAC,eAAe;QAClC,QAAQ;YACN,YAAY;YACZ,UAAU;QACZ;IACF;AACF;AAQO,MAAM,cAAc,OAAO;IAChC,MAAM,WAAoC,MAAM,6MAAS,CAAC,GAAG,CAAC,eAAe;QAC3E,QAAQ;YACN,KAAK;YACL,YAAY;YACZ,UAAU;QACZ;IACF;IAEA,IAAI,YAAY,SAAS,KAAK,IAAI,SAAS,KAAK,CAAC,MAAM,GAAG,GAAG;QAC3D,OAAO,SAAS,KAAK,CAAC,EAAE;IAC1B;IAEA,MAAM,IAAI,MAAM,AAAC,qBAA2B,OAAP,QAAO;AAC9C","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raven/Frontend-Dev/main-parent/packages/admin-panel/src/utils/dateUtils.ts"],"sourcesContent":["// توابع کمکی برای شروع روز، هفته و ماه\r\nimport { startOfDay, startOfWeek, startOfMonth, isWithinInterval, endOfDay, endOfWeek, endOfMonth } from 'date-fns';\r\n\r\n/**\r\n * بررسی می‌کند که آیا یک تاریخ معین، امروز است یا نه.\r\n * @param date تاریخ ورودی (می‌تواند رشته یا Date باشد)\r\n */\r\nexport const isToday = (date: string | Date): boolean => {\r\n  const dateObj = new Date(date);\r\n  const todayStart = startOfDay(new Date());\r\n  const todayEnd = endOfDay(new Date());\r\n  return isWithinInterval(dateObj, { start: todayStart, end: todayEnd });\r\n};\r\n\r\n/**\r\n * بررسی می‌کند که آیا یک تاریخ معین، در هفته جاری است یا نه.\r\n * (نکته: date-fns هفته را از یکشنبه شروع می‌کند. برای شنبه، نیاز به تنظیمات locale است)\r\n */\r\nexport const isThisWeek = (date: string | Date): boolean => {\r\n  const dateObj = new Date(date);\r\n  const weekStart = startOfWeek(new Date(), { weekStartsOn: 6 }); // شنبه به عنوان شروع هفته\r\n  const weekEnd = endOfWeek(new Date(), { weekStartsOn: 6 });\r\n  return isWithinInterval(dateObj, { start: weekStart, end: weekEnd });\r\n};\r\n\r\n/**\r\n * بررسی می‌کند که آیا یک تاریخ معین، در ماه جاری است یا نه.\r\n */\r\nexport const isThisMonth = (date: string | Date): boolean => {\r\n  const dateObj = new Date(date);\r\n  const monthStart = startOfMonth(new Date());\r\n  const monthEnd = endOfMonth(new Date());\r\n  return isWithinInterval(dateObj, { start: monthStart, end: monthEnd });\r\n};"],"names":[],"mappings":"AAAA,uCAAuC;;;;;;;;;AACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMO,MAAM,UAAU,CAAC;IACtB,MAAM,UAAU,IAAI,KAAK;IACzB,MAAM,aAAa,IAAA,uPAAU,EAAC,IAAI;IAClC,MAAM,WAAW,IAAA,mPAAQ,EAAC,IAAI;IAC9B,OAAO,IAAA,mQAAgB,EAAC,SAAS;QAAE,OAAO;QAAY,KAAK;IAAS;AACtE;AAMO,MAAM,aAAa,CAAC;IACzB,MAAM,UAAU,IAAI,KAAK;IACzB,MAAM,YAAY,IAAA,yPAAW,EAAC,IAAI,QAAQ;QAAE,cAAc;IAAE,IAAI,0BAA0B;IAC1F,MAAM,UAAU,IAAA,qPAAS,EAAC,IAAI,QAAQ;QAAE,cAAc;IAAE;IACxD,OAAO,IAAA,mQAAgB,EAAC,SAAS;QAAE,OAAO;QAAW,KAAK;IAAQ;AACpE;AAKO,MAAM,cAAc,CAAC;IAC1B,MAAM,UAAU,IAAI,KAAK;IACzB,MAAM,aAAa,IAAA,2PAAY,EAAC,IAAI;IACpC,MAAM,WAAW,IAAA,uPAAU,EAAC,IAAI;IAChC,OAAO,IAAA,mQAAgB,EAAC,SAAS;QAAE,OAAO;QAAY,KAAK;IAAS;AACtE","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raven/Frontend-Dev/main-parent/packages/admin-panel/src/hooks/ListPageHook.ts"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport { type PaginatedResponse } from '../services/shopsService'; // تایپ عمومی را وارد می‌کنیم\r\nimport { isToday, isThisWeek, isThisMonth } from '../utils/dateUtils';\r\n\r\n// ۱. تعریف ورودی‌های هوک\r\ninterface UseListPageOptions<T> {\r\n  // تابعی که داده‌ها را از API واکشی می‌کند\r\n  fetchData: (page: number, pageSize: number) => Promise<PaginatedResponse<T>>;\r\n  // کلیدهایی که در آن‌ها جستجو انجام می‌شود\r\n  searchKeys: (keyof T)[];\r\n  // کلیدی که تاریخ آیتم را مشخص می‌کند\r\n  dateKey: keyof T;\r\n\r\n  /**\r\n   * کلیدی از آبجکت T که وضعیت آیتم را مشخص می‌کند.\r\n   */\r\n  statusKey: keyof T;\r\n}\r\n\r\n/**\r\n * یک هوک سفارشی که تمام منطق یک صفحه لیست (واکشی، فیلتر، جستجو، پجینیشن) را مدیریت می‌کند.\r\n * T نوع داده‌ای آیتم‌های لیست است (مثلاً Shop).\r\n */\r\nexport const useListPage = <T extends {}>({\r\n  fetchData,\r\n  searchKeys,\r\n  dateKey,\r\n  statusKey, // ۱. پراپ جدید را دریافت می‌کنیم\r\n}: UseListPageOptions<T>) => {\r\n  const [allData, setAllData] = useState<T[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [activeTimeFilter, setActiveTimeFilter] = useState('newest');\r\n  // ۲. State برای فیلتر وضعیت حالا داخل هوک است\r\n  const [selectedStatus, setSelectedStatus] = useState('all'); \r\n\r\n\r\n  // --- واکشی اولیه داده‌ها ---\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        // برای سادگی، فعلاً تمام داده‌ها را می‌گیریم. می‌توان این را هم هوشمند کرد.\r\n        const response = await fetchData(1, 1000);\r\n        setAllData(response.items);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : \"خطا در واکشی داده‌ها\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    loadData();\r\n  }, [fetchData]); // فقط یک بار اجرا می‌شود\r\n\r\n  // --- منطق فیلترینگ و مرتب‌سازی ---\r\n  const filteredAndSortedData = useMemo(() => {\r\n    let filtered = [...allData];\r\n\r\n    if (searchTerm) {\r\n      filtered = filtered.filter(item =>\r\n        searchKeys.some(key => \r\n          String(item[key]).toLowerCase().includes(searchTerm.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n     if (selectedStatus !== 'all') {\r\n      filtered = filtered.filter(item => item[statusKey] === selectedStatus);\r\n    }\r\n    \r\n    // اینجا می‌توانید فیلتر وضعیت را هم به صورت ژنریک پیاده‌سازی کنید\r\n    // if (selectedStatus !== 'all') { ... }\r\n\r\n    switch (activeTimeFilter) {\r\n      case 'today':\r\n        filtered = filtered.filter(item => isToday(String(item[dateKey])));\r\n        break;\r\n      case 'this_week':\r\n        filtered = filtered.filter(item => isThisWeek(String(item[dateKey])));\r\n        break;\r\n      case 'this_month':\r\n        filtered = filtered.filter(item => isThisMonth(String(item[dateKey])));\r\n        break;\r\n      case 'oldest':\r\n        filtered.sort((a, b) => new Date(String(a[dateKey])).getTime() - new Date(String(b[dateKey])).getTime());\r\n        break;\r\n      case 'newest':\r\n      default:\r\n        filtered.sort((a, b) => new Date(String(b[dateKey])).getTime() - new Date(String(a[dateKey])).getTime());\r\n        break;\r\n    }\r\n    \r\n    return filtered;\r\n  }, [allData, searchTerm, activeTimeFilter, searchKeys, dateKey,statusKey]);\r\n\r\n  // --- منطق پجینیشن ---\r\n  const paginatedData = useMemo(() => {\r\n    const startIndex = (currentPage - 1) * pageSize;\r\n    return filteredAndSortedData.slice(startIndex, startIndex + pageSize);\r\n  }, [filteredAndSortedData, currentPage, pageSize]);\r\n\r\n  // --- Handlers ---\r\n  const handlePageChange = (page: number) => setCurrentPage(page);\r\n  const handlePageSizeChange = (size: number) => { setPageSize(size); setCurrentPage(1); };\r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => { setSearchTerm(event.target.value); setCurrentPage(1); };\r\n  const handleTimeFilterChange = (tabId: string) => { setActiveTimeFilter(tabId); setCurrentPage(1); };\r\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => { setSelectedStatus(event.target.value); setCurrentPage(1); };\r\n  \r\n  // --- مقادیر خروجی هوک ---\r\n   return {\r\n    data: paginatedData,\r\n    totalCount: filteredAndSortedData.length,\r\n    isLoading,\r\n    error,\r\n    currentPage,\r\n    pageSize,\r\n    searchTerm,\r\n    activeTimeFilter,\r\n    selectedStatus, // ۶. مقدار فعلی فیلتر را برمی‌گردانیم\r\n    handlePageChange,\r\n    handlePageSizeChange,\r\n    handleSearchChange,\r\n    handleTimeFilterChange,\r\n    handleStatusChange, // ۷. handler را برمی‌گردانیم\r\n  };\r\n};"],"names":[],"mappings":";;;;AAEA;AAEA;;AAJA;;;AAyBO,MAAM,cAAc;QAAe,EACxC,SAAS,EACT,UAAU,EACV,OAAO,EACP,SAAS,EACa;;IACtB,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,6TAAQ,EAAM,EAAE;IAC9C,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,6TAAQ,EAAC;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,6TAAQ,EAAgB;IAClD,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,6TAAQ,EAAC;IACzC,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,6TAAQ,EAAC;IAC/C,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,6TAAQ,EAAC;IAC7C,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,IAAA,6TAAQ,EAAC;IACzD,8CAA8C;IAC9C,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,6TAAQ,EAAC;IAGrD,8BAA8B;IAC9B,IAAA,8TAAS;iCAAC;YACR,MAAM;kDAAW;oBACf,IAAI;wBACF,aAAa;wBACb,4EAA4E;wBAC5E,MAAM,WAAW,MAAM,UAAU,GAAG;wBACpC,WAAW,SAAS,KAAK;oBAC3B,EAAE,OAAO,KAAK;wBACZ,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;oBAChD,SAAU;wBACR,aAAa;oBACf;gBACF;;YACA;QACF;gCAAG;QAAC;KAAU,GAAG,yBAAyB;IAE1C,oCAAoC;IACpC,MAAM,wBAAwB,IAAA,4TAAO;sDAAC;YACpC,IAAI,WAAW;mBAAI;aAAQ;YAE3B,IAAI,YAAY;gBACd,WAAW,SAAS,MAAM;kEAAC,CAAA,OACzB,WAAW,IAAI;0EAAC,CAAA,MACd,OAAO,IAAI,CAAC,IAAI,EAAE,WAAW,GAAG,QAAQ,CAAC,WAAW,WAAW;;;YAGrE;YACC,IAAI,mBAAmB,OAAO;gBAC7B,WAAW,SAAS,MAAM;kEAAC,CAAA,OAAQ,IAAI,CAAC,UAAU,KAAK;;YACzD;YAEA,kEAAkE;YAClE,wCAAwC;YAExC,OAAQ;gBACN,KAAK;oBACH,WAAW,SAAS,MAAM;sEAAC,CAAA,OAAQ,IAAA,0MAAO,EAAC,OAAO,IAAI,CAAC,QAAQ;;oBAC/D;gBACF,KAAK;oBACH,WAAW,SAAS,MAAM;sEAAC,CAAA,OAAQ,IAAA,6MAAU,EAAC,OAAO,IAAI,CAAC,QAAQ;;oBAClE;gBACF,KAAK;oBACH,WAAW,SAAS,MAAM;sEAAC,CAAA,OAAQ,IAAA,8MAAW,EAAC,OAAO,IAAI,CAAC,QAAQ;;oBACnE;gBACF,KAAK;oBACH,SAAS,IAAI;sEAAC,CAAC,GAAG,IAAM,IAAI,KAAK,OAAO,CAAC,CAAC,QAAQ,GAAG,OAAO,KAAK,IAAI,KAAK,OAAO,CAAC,CAAC,QAAQ,GAAG,OAAO;;oBACrG;gBACF,KAAK;gBACL;oBACE,SAAS,IAAI;sEAAC,CAAC,GAAG,IAAM,IAAI,KAAK,OAAO,CAAC,CAAC,QAAQ,GAAG,OAAO,KAAK,IAAI,KAAK,OAAO,CAAC,CAAC,QAAQ,GAAG,OAAO;;oBACrG;YACJ;YAEA,OAAO;QACT;qDAAG;QAAC;QAAS;QAAY;QAAkB;QAAY;QAAQ;KAAU;IAEzE,uBAAuB;IACvB,MAAM,gBAAgB,IAAA,4TAAO;8CAAC;YAC5B,MAAM,aAAa,CAAC,cAAc,CAAC,IAAI;YACvC,OAAO,sBAAsB,KAAK,CAAC,YAAY,aAAa;QAC9D;6CAAG;QAAC;QAAuB;QAAa;KAAS;IAEjD,mBAAmB;IACnB,MAAM,mBAAmB,CAAC,OAAiB,eAAe;IAC1D,MAAM,uBAAuB,CAAC;QAAmB,YAAY;QAAO,eAAe;IAAI;IACvF,MAAM,qBAAqB,CAAC;QAAiD,cAAc,MAAM,MAAM,CAAC,KAAK;QAAG,eAAe;IAAI;IACnI,MAAM,yBAAyB,CAAC;QAAoB,oBAAoB;QAAQ,eAAe;IAAI;IACnG,MAAM,qBAAqB,CAAC;QAAkD,kBAAkB,MAAM,MAAM,CAAC,KAAK;QAAG,eAAe;IAAI;IAExI,2BAA2B;IAC1B,OAAO;QACN,MAAM;QACN,YAAY,sBAAsB,MAAM;QACxC;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACF;AACF;GAxGa","debugId":null}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raven/Frontend-Dev/main-parent/packages/admin-panel/src/config/filters.config.ts"],"sourcesContent":["import { type FilterTab, type SelectOption } from \"@my-ds/design-system\";\r\n\r\n// فیلترهای زمانی مشترک (بدون تغییر)\r\nexport const commonTimeFilters: FilterTab[] = [\r\n  { id: 'newest', label: 'جدیدترین' },\r\n  { id: 'oldest', label: 'قدیمی‌ترین' },\r\n  { id: 'today', label: 'امروز' },\r\n  { id: 'this_week', label: 'این هفته' },\r\n  { id: 'this_month', label: 'این ماه' },\r\n];\r\n\r\n\r\n// فیلترهای وضعیت اختصاصی برای فروشگاه‌ها\r\nexport const shopStatusFilters: SelectOption[] = [\r\n  { value: 'all', label: 'همه وضعیت‌ها' },\r\n  { value: 'Confirmed', label: 'تایید شده' },\r\n  { value: 'InProgress', label: 'در حال بررسی' },\r\n  { value: 'Answered', label: 'پاسخ داده شده' },\r\n  { value: 'Rejected', label: 'رد شده' },\r\n];\r\n\r\n\r\nexport const pageSizeOptions: SelectOption[] = [\r\n  { label: '5', value: 5 },\r\n  { label: '10', value: 10 },\r\n  { label: '20', value: 20 },\r\n  { label: '50', value: 50 },\r\n  { label: '100', value: 100 },\r\n];"],"names":[],"mappings":";;;;;;;;AAGO,MAAM,oBAAiC;IAC5C;QAAE,IAAI;QAAU,OAAO;IAAW;IAClC;QAAE,IAAI;QAAU,OAAO;IAAa;IACpC;QAAE,IAAI;QAAS,OAAO;IAAQ;IAC9B;QAAE,IAAI;QAAa,OAAO;IAAW;IACrC;QAAE,IAAI;QAAc,OAAO;IAAU;CACtC;AAIM,MAAM,oBAAoC;IAC/C;QAAE,OAAO;QAAO,OAAO;IAAe;IACtC;QAAE,OAAO;QAAa,OAAO;IAAY;IACzC;QAAE,OAAO;QAAc,OAAO;IAAe;IAC7C;QAAE,OAAO;QAAY,OAAO;IAAgB;IAC5C;QAAE,OAAO;QAAY,OAAO;IAAS;CACtC;AAGM,MAAM,kBAAkC;IAC7C;QAAE,OAAO;QAAK,OAAO;IAAE;IACvB;QAAE,OAAO;QAAM,OAAO;IAAG;IACzB;QAAE,OAAO;QAAM,OAAO;IAAG;IACzB;QAAE,OAAO;QAAM,OAAO;IAAG;IACzB;QAAE,OAAO;QAAO,OAAO;IAAI;CAC5B","debugId":null}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raven/Frontend-Dev/main-parent/packages/admin-panel/src/utils/translations.ts"],"sourcesContent":["// ۱. تایپ StatusKey را با مقادیر جدید به‌روز می‌کنیم\r\nexport type StatusKey = \r\n  'Confirmed' | \r\n  'InProgress' | \r\n  'Answered' | \r\n  'Rejected' | \r\n  'Pending' | \r\n  'Ok' | \r\n  string;\r\n\r\n// ۲. دیکشنری ترجمه‌ها را با مقادیر جدید کامل می‌کنیم\r\nconst statusTranslations: Record<StatusKey, string> = {\r\n  // وضعیت‌های فروشگاه\r\n  'Confirmed': 'تایید شده',\r\n  'Pending': 'در انتظار بررسی',\r\n  'Rejected': 'رد شده',\r\n  'Ok': 'موفق',\r\n  \r\n  // ✨ --- وضعیت‌های جدید اضافه شدند ---\r\n  'InProgress': 'در حال بررسی',\r\n  'Answered': 'پاسخ داده شده',\r\n};\r\n\r\n/**\r\n * یک کلید وضعیت (مانند 'Confirmed') را می‌گیرد و معادل فارسی آن را برمی‌گرداند.\r\n * اگر ترجمه‌ای پیدا نشود، خود کلید را برمی‌گرداند.\r\n * @param status - کلید وضعیت برای ترجمه\r\n * @returns رشته ترجمه شده\r\n */\r\nexport const translateStatus = (status: StatusKey): string => {\r\n  return statusTranslations[status] || status;\r\n};"],"names":[],"mappings":"AAAA,qDAAqD;;;;;AAUrD,qDAAqD;AACrD,MAAM,qBAAgD;IACpD,oBAAoB;IACpB,aAAa;IACb,WAAW;IACX,YAAY;IACZ,MAAM;IAEN,sCAAsC;IACtC,cAAc;IACd,YAAY;AACd;AAQO,MAAM,kBAAkB,CAAC;IAC9B,OAAO,kBAAkB,CAAC,OAAO,IAAI;AACvC","debugId":null}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raven/Frontend-Dev/main-parent/packages/admin-panel/src/utils/exportUtils.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\r\n\r\n/**\r\n * داده‌ها را به یک فایل اکسل تبدیل کرده و دانلود می‌کند.\r\n * @param data آرایه‌ای از آبجکت‌ها برای تبدیل\r\n * @param fileName نام فایل خروجی (بدون پسوند)\r\n * @param sheetName نام شیت داخل فایل اکسل\r\n */\r\nexport const exportToExcel = <T extends {}>(data: T[], fileName: string, sheetName: string = 'Sheet 1'): void => {\r\n  try {\r\n    // ۱. ساخت یک شیت جدید از داده‌های JSON\r\n    const worksheet = XLSX.utils.json_to_sheet(data);\r\n\r\n    // ۲. ساخت یک بوک جدید\r\n    const workbook = XLSX.utils.book_new();\r\n\r\n    // ۳. اضافه کردن شیت به بوک\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\r\n\r\n    // ۴. نوشتن (تولید) فایل و شروع دانلود\r\n    XLSX.writeFile(workbook, `${fileName}.xlsx`);\r\n\r\n  } catch (error) {\r\n    console.error(\"خطا در هنگام تولید فایل اکسل:\", error);\r\n    alert(\"متاسفانه در تولید خروجی اکسل خطایی رخ داد.\");\r\n  }\r\n};"],"names":[],"mappings":";;;;AAAA;;AAQO,MAAM,gBAAgB,SAAe,MAAW;QAAkB,6EAAoB;IAC3F,IAAI;QACF,uCAAuC;QACvC,MAAM,YAAY,gOAAU,CAAC,aAAa,CAAC;QAE3C,sBAAsB;QACtB,MAAM,WAAW,gOAAU,CAAC,QAAQ;QAEpC,2BAA2B;QAC3B,gOAAU,CAAC,iBAAiB,CAAC,UAAU,WAAW;QAElD,sCAAsC;QACtC,oOAAc,CAAC,UAAU,AAAC,GAAW,OAAT,UAAS;IAEvC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 479, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Raven/Frontend-Dev/main-parent/packages/admin-panel/src/app/shops/page.tsx"],"sourcesContent":["\"use client\";\r\nimport React, { useState, useCallback, ReactNode } from \"react\";\r\nimport Link from \"next/link\";\r\nimport { useRouter } from 'next/navigation';\r\nimport { usePathname } from \"next/navigation\";\r\nimport {\r\n  YadakchiAdminLayout,\r\n  ListPageLayout,\r\n  Label,\r\n  FilterTabs,\r\n  Select,\r\n  type ColumnDefinition,\r\n} from \"@my-ds/design-system\";\r\n\r\nimport { getShops, type Shop } from \"../../services/shopsService\";\r\nimport { useListPage } from \"../../hooks/ListPageHook\";\r\nimport { commonTimeFilters, shopStatusFilters, pageSizeOptions } from \"../../config/filters.config\";\r\nimport { translateStatus } from \"../../utils/translations\";\r\nimport { exportToExcel } from \"../../utils/exportUtils\";\r\n\r\nexport default function ShopsPage() {\r\n  const pathname = usePathname();\r\n  const router = useRouter();\r\n  const renderLink = (href: string, children: ReactNode) => <Link href={href}>{children}</Link>;\r\n\r\n  // تابع واکشی داده را با useCallback پایدار می‌کنیم تا از رندرهای اضافی جلوگیری شود\r\n  const fetchShopsData = useCallback((page: number, size: number) => {\r\n    return getShops(page, size);\r\n  }, []);\r\n\r\n  // فراخوانی هوک هوشمند با پیکربندی کامل\r\n  const {\r\n    data: shops,\r\n    totalCount,\r\n    isLoading,\r\n    error,\r\n    currentPage,\r\n    pageSize,\r\n    searchTerm,\r\n    activeTimeFilter,\r\n    selectedStatus,\r\n    handlePageChange,\r\n    handlePageSizeChange,\r\n    handleSearchChange,\r\n    handleTimeFilterChange,\r\n    handleStatusChange,\r\n  } = useListPage<Shop>({\r\n    fetchData: fetchShopsData,\r\n    searchKeys: ['shopTitle', 'name', 'lastname'],\r\n    dateKey: 'createDate',\r\n    statusKey: 'registrationStatus',\r\n  });\r\n  \r\n  // State های مختص این صفحه (مانند isExporting)\r\n  const [isExporting, setIsExporting] = useState(false);\r\n\r\n  // Handlers مختص این صفحه\r\n   const handleViewShop = (shopId: string) => {\r\n    // به جای alert، به صفحه جزئیات navigate می‌کنیم\r\n    router.push(`/shops/${shopId}`);\r\n  };\r\n  const handleEditShop = (shopId: string) => alert(`ویرایش: ${shopId}`);\r\n  const handleDeleteShop = (shopId: string) => alert(`حذف: ${shopId}`);\r\n  \r\n  const handleExport = async () => {\r\n    // نکته: ما باید از داده‌های فیلتر شده خروجی بگیریم، که هوک آن‌ها را به ما نمی‌دهد.\r\n    // برای سادگی، فعلاً از داده‌های صفحه‌بندی شده فعلی خروجی می‌گیریم.\r\n    if (!shops.length) {\r\n      alert(\"هیچ داده‌ای برای خروجی گرفتن وجود ندارد.\");\r\n      return;\r\n    }\r\n    setIsExporting(true);\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    const dataToExport = shops.map(shop => ({\r\n      'نام فروشگاه': shop.shopTitle,\r\n      'نام فروشنده': `${shop.name} ${shop.lastname}`,\r\n      'وضعیت': translateStatus(shop.registrationStatus),\r\n      'تاریخ ثبت': new Date(shop.createDate).toLocaleDateString('fa-IR'),\r\n    }));\r\n    exportToExcel(dataToExport, \"لیست_فروشگاه‌ها\");\r\n    setIsExporting(false);\r\n  };\r\n\r\n  // Column Definitions\r\n  const shopColumns: ColumnDefinition<Shop>[] = [\r\n    { accessorKey: 'shopTitle', header: 'نام فروشگاه', cell: (shop) => <Label text={shop.shopTitle} size=\"md\" /> },\r\n    { accessorKey: 'name', header: 'نام فروشنده', cell: (shop) => <Label text={`${shop.name} ${shop.lastname}`} size=\"md\" /> },\r\n    { accessorKey: 'registrationStatus', header: 'وضعیت', cell: (shop) => <Label text={translateStatus(shop.registrationStatus)} size=\"sm\" variant={shop.registrationStatus === 'Confirmed' ? 'primary' : 'error'} /> },\r\n    { accessorKey: 'createDate', header: 'تاریخ ثبت', cell: (shop) => <Label text={new Date(shop.createDate).toLocaleDateString('fa-IR')} size=\"md\" /> },\r\n  ];\r\n  \r\n  // Props Preparation\r\n  const filterSection = (\r\n    <div style={{ display: 'flex', flexWrap: 'wrap', gap: '1rem', alignItems: 'center' }}>\r\n      <FilterTabs\r\n        tabs={commonTimeFilters}\r\n        activeTab={activeTimeFilter}\r\n        onTabChange={handleTimeFilterChange}\r\n      />\r\n      <Select\r\n        options={shopStatusFilters}\r\n        value={selectedStatus}\r\n        onChange={handleStatusChange}\r\n        aria-label=\"فیلتر بر اساس وضعیت\"\r\n      />\r\n    </div>\r\n  );\r\n  \r\n  const listPageProps = {\r\n    listPageHeaderProps: {\r\n      title: \"لیست فروشگاه‌ها\",\r\n      totalItems: totalCount,\r\n      searchInputProps: {\r\n        value: searchTerm,\r\n        onChange: handleSearchChange,\r\n        placeholder: \"جستجو...\",\r\n      },\r\n      exportButtonProps: { onClick: handleExport, isLoading: isExporting },\r\n      actions: <button>افزودن فروشگاه</button> \r\n    },\r\n    tableProps: {\r\n      columns: shopColumns,\r\n      data: shops,\r\n      emptyStateMessage: searchTerm ? \"موردی یافت نشد.\" : \"هیچ فروشگاهی ثبت نشده است.\",\r\n      rowActions: (shop: Shop) => ({\r\n        onView: () => handleViewShop(shop.id),\r\n        onEdit: () => handleEditShop(shop.id),\r\n        onDelete: () => handleDeleteShop(shop.id),\r\n      }),\r\n    },\r\n    paginationProps: {\r\n      currentPage: currentPage,\r\n      pageSize: pageSize,\r\n      totalCount: totalCount,\r\n      onPageChange: handlePageChange,\r\n      pageSizeOptions: pageSizeOptions,\r\n      onPageSizeChange: handlePageSizeChange,\r\n    },\r\n    filterSection: filterSection,\r\n    isLoading: isLoading,\r\n    error: error,\r\n  };\r\n\r\n  return (\r\n    <YadakchiAdminLayout\r\n      currentPath={pathname}\r\n      renderLink={renderLink}\r\n    >\r\n      <ListPageLayout {...listPageProps} />\r\n    </YadakchiAdminLayout>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}